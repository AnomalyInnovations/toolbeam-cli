'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.toolsFromOpenapi = toolsFromOpenapi;
exports.specNameFromOpenapi = specNameFromOpenapi;
exports.specUUIDFromOpenapi = specUUIDFromOpenapi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var operations = ['get', 'put', 'post', 'delete', 'options', 'head', 'patch'];
var getOperationObject = function getOperationObject(oapi, ep) {
	return oapi.paths[ep.path][ep.operation];
};
var getIdFromEndpoint = function getIdFromEndpoint(ep) {
	return ep.operation + ' ' + ep.path;
};

function toolsFromOpenapi(oapi) {
	return getEndpoints(oapi).map(function (endpoint) {
		return endpointsToTool(endpoint, getOperationObject(oapi, endpoint));
	});
}

function specNameFromOpenapi(oapi) {
	return oapi.info && oapi.info.title ? oapi.info.title : oapi.host;
}

function specUUIDFromOpenapi(oapi) {
	return oapi.info && oapi.info['x-tb-uuid'] ? oapi.info['x-tb-uuid'] : null;
}

function getEndpoints(oapi) {
	return (0, _keys2.default)(oapi.paths).reduce(function (acc, path) {
		(0, _keys2.default)(oapi.paths[path]).forEach(function (operation) {
			operations.includes(operation.toLowerCase()) && acc.push({ path: path, operation: operation });
		});
		return acc;
	}, []);
}

function getNameFromEndpoint(ep) {
	var name = ep.path.replace(/^\//, '').split('/').pop();
	return name == '' ? capitalize(ep.operation) : capitalize(ep.operation) + ' ' + capitalize(name);
}

function endpointsToTool(endpoint, opr) {
	var path = endpoint.path;
	var operation = endpoint.operation;

	var name = opr['x-tb-name'] ? opr['x-tb-name'] : getNameFromEndpoint(endpoint);
	var id = opr.operationId ? opr.operationId : getIdFromEndpoint(endpoint);
	var ret = {
		name: name,
		id: id,
		spec_path: [path, operation]
	};

	// pass in color if defined
	if (opr['x-tb-color']) {
		ret['color'] = opr['x-tb-color'];
	}

	return ret;
}

function capitalize(str) {
	str = str.toLowerCase();
	return '' + str.charAt(0).toUpperCase() + str.slice(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJzL2NvbnN1bWUtb3BlbmFwaS5qcyJdLCJuYW1lcyI6WyJ0b29sc0Zyb21PcGVuYXBpIiwic3BlY05hbWVGcm9tT3BlbmFwaSIsInNwZWNVVUlERnJvbU9wZW5hcGkiLCJvcGVyYXRpb25zIiwiZ2V0T3BlcmF0aW9uT2JqZWN0Iiwib2FwaSIsImVwIiwicGF0aHMiLCJwYXRoIiwib3BlcmF0aW9uIiwiZ2V0SWRGcm9tRW5kcG9pbnQiLCJnZXRFbmRwb2ludHMiLCJtYXAiLCJlbmRwb2ludHNUb1Rvb2wiLCJlbmRwb2ludCIsImluZm8iLCJ0aXRsZSIsImhvc3QiLCJyZWR1Y2UiLCJhY2MiLCJmb3JFYWNoIiwiaW5jbHVkZXMiLCJ0b0xvd2VyQ2FzZSIsInB1c2giLCJnZXROYW1lRnJvbUVuZHBvaW50IiwibmFtZSIsInJlcGxhY2UiLCJzcGxpdCIsInBvcCIsImNhcGl0YWxpemUiLCJvcHIiLCJpZCIsIm9wZXJhdGlvbklkIiwicmV0Iiwic3BlY19wYXRoIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztRQUlnQkEsZ0IsR0FBQUEsZ0I7UUFRQUMsbUIsR0FBQUEsbUI7UUFNQUMsbUIsR0FBQUEsbUI7Ozs7QUFsQmhCLElBQU1DLGFBQWlCLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxNQUFmLEVBQXVCLFFBQXZCLEVBQWlDLFNBQWpDLEVBQTRDLE1BQTVDLEVBQW9ELE9BQXBELENBQXZCO0FBQ0EsSUFBTUMscUJBQXFCLFNBQXJCQSxrQkFBcUIsQ0FBQ0MsSUFBRCxFQUFPQyxFQUFQO0FBQUEsUUFBY0QsS0FBS0UsS0FBTCxDQUFXRCxHQUFHRSxJQUFkLEVBQW9CRixHQUFHRyxTQUF2QixDQUFkO0FBQUEsQ0FBM0I7QUFDQSxJQUFNQyxvQkFBcUIsU0FBckJBLGlCQUFxQjtBQUFBLFFBQVNKLEdBQUdHLFNBQVosU0FBeUJILEdBQUdFLElBQTVCO0FBQUEsQ0FBM0I7O0FBRU8sU0FBU1IsZ0JBQVQsQ0FBMEJLLElBQTFCLEVBQWdDO0FBQ3RDLFFBQU9NLGFBQWFOLElBQWIsRUFDTE8sR0FESyxDQUNEO0FBQUEsU0FBWUMsZ0JBQ2hCQyxRQURnQixFQUVoQlYsbUJBQW1CQyxJQUFuQixFQUF5QlMsUUFBekIsQ0FGZ0IsQ0FBWjtBQUFBLEVBREMsQ0FBUDtBQUtBOztBQUVNLFNBQVNiLG1CQUFULENBQTZCSSxJQUE3QixFQUFtQztBQUN6QyxRQUFRQSxLQUFLVSxJQUFMLElBQWFWLEtBQUtVLElBQUwsQ0FBVUMsS0FBeEIsR0FDSlgsS0FBS1UsSUFBTCxDQUFVQyxLQUROLEdBRUpYLEtBQUtZLElBRlI7QUFHQTs7QUFFTSxTQUFTZixtQkFBVCxDQUE2QkcsSUFBN0IsRUFBbUM7QUFDekMsUUFBUUEsS0FBS1UsSUFBTCxJQUFhVixLQUFLVSxJQUFMLENBQVUsV0FBVixDQUFkLEdBQ0pWLEtBQUtVLElBQUwsQ0FBVSxXQUFWLENBREksR0FFSixJQUZIO0FBR0E7O0FBRUQsU0FBU0osWUFBVCxDQUFzQk4sSUFBdEIsRUFBNEI7QUFDM0IsUUFBTyxvQkFBWUEsS0FBS0UsS0FBakIsRUFBd0JXLE1BQXhCLENBQStCLFVBQUNDLEdBQUQsRUFBTVgsSUFBTixFQUFlO0FBQ3BELHNCQUFZSCxLQUFLRSxLQUFMLENBQVdDLElBQVgsQ0FBWixFQUNFWSxPQURGLENBQ1UscUJBQWE7QUFDcEJqQixjQUFXa0IsUUFBWCxDQUFvQlosVUFBVWEsV0FBVixFQUFwQixDQUFELElBQ0lILElBQUlJLElBQUosQ0FBUyxFQUFDZixNQUFNQSxJQUFQLEVBQWFDLFdBQVdBLFNBQXhCLEVBQVQsQ0FESjtBQUVBLEdBSkY7QUFLQSxTQUFPVSxHQUFQO0FBQ0EsRUFQTSxFQU9KLEVBUEksQ0FBUDtBQVFBOztBQUVELFNBQVNLLG1CQUFULENBQTZCbEIsRUFBN0IsRUFBaUM7QUFDaEMsS0FBTW1CLE9BQU9uQixHQUFHRSxJQUFILENBQVFrQixPQUFSLENBQWdCLEtBQWhCLEVBQXVCLEVBQXZCLEVBQTJCQyxLQUEzQixDQUFpQyxHQUFqQyxFQUFzQ0MsR0FBdEMsRUFBYjtBQUNBLFFBQVFILFFBQVEsRUFBVCxHQUNKSSxXQUFXdkIsR0FBR0csU0FBZCxDQURJLEdBRURvQixXQUFXdkIsR0FBR0csU0FBZCxDQUZDLFNBRTJCb0IsV0FBV0osSUFBWCxDQUZsQztBQUdBOztBQUVELFNBQVNaLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DZ0IsR0FBbkMsRUFBd0M7QUFBQSxLQUN6QnRCLElBRHlCLEdBQ01NLFFBRE4sQ0FDL0JOLElBRCtCO0FBQUEsS0FDUkMsU0FEUSxHQUNNSyxRQUROLENBQ25CTCxTQURtQjs7QUFFdkMsS0FBTWdCLE9BQU9LLElBQUksV0FBSixJQUNWQSxJQUFJLFdBQUosQ0FEVSxHQUVWTixvQkFBb0JWLFFBQXBCLENBRkg7QUFHQSxLQUFNaUIsS0FBS0QsSUFBSUUsV0FBSixHQUNSRixJQUFJRSxXQURJLEdBRVJ0QixrQkFBa0JJLFFBQWxCLENBRkg7QUFHQSxLQUFNbUIsTUFBTTtBQUNYUixRQUFTQSxJQURFO0FBRVhNLE1BQVFBLEVBRkc7QUFHWEcsYUFBWSxDQUFDMUIsSUFBRCxFQUFPQyxTQUFQO0FBSEQsRUFBWjs7QUFNQTtBQUNBLEtBQUlxQixJQUFJLFlBQUosQ0FBSixFQUF1QjtBQUN0QkcsTUFBSSxPQUFKLElBQWVILElBQUksWUFBSixDQUFmO0FBQ0E7O0FBRUQsUUFBT0csR0FBUDtBQUNBOztBQUVELFNBQVNKLFVBQVQsQ0FBb0JNLEdBQXBCLEVBQXlCO0FBQ3hCQSxPQUFNQSxJQUFJYixXQUFKLEVBQU47QUFDQSxhQUFVYSxJQUFJQyxNQUFKLENBQVcsQ0FBWCxFQUFjQyxXQUFkLEVBQVYsR0FBd0NGLElBQUlHLEtBQUosQ0FBVSxDQUFWLENBQXhDO0FBQ0EiLCJmaWxlIjoiY29uc3VtZS1vcGVuYXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgb3BlcmF0aW9uc1x0XHRcdFx0XHQ9IFsnZ2V0JywgJ3B1dCcsICdwb3N0JywgJ2RlbGV0ZScsICdvcHRpb25zJywgJ2hlYWQnLCAncGF0Y2gnXTtcbmNvbnN0IGdldE9wZXJhdGlvbk9iamVjdFx0PSAob2FwaSwgZXApID0+IG9hcGkucGF0aHNbZXAucGF0aF1bZXAub3BlcmF0aW9uXTtcbmNvbnN0IGdldElkRnJvbUVuZHBvaW50IFx0PSBlcCA9PiBgJHtlcC5vcGVyYXRpb259ICR7ZXAucGF0aH1gO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9vbHNGcm9tT3BlbmFwaShvYXBpKSB7XG5cdHJldHVybiBnZXRFbmRwb2ludHMob2FwaSlcblx0XHQubWFwKGVuZHBvaW50ID0+IGVuZHBvaW50c1RvVG9vbChcblx0XHRcdGVuZHBvaW50LFxuXHRcdFx0Z2V0T3BlcmF0aW9uT2JqZWN0KG9hcGksIGVuZHBvaW50KSxcblx0XHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwZWNOYW1lRnJvbU9wZW5hcGkob2FwaSkge1xuXHRyZXR1cm4gKG9hcGkuaW5mbyAmJiBvYXBpLmluZm8udGl0bGUpXG5cdFx0PyBvYXBpLmluZm8udGl0bGVcblx0XHQ6IG9hcGkuaG9zdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwZWNVVUlERnJvbU9wZW5hcGkob2FwaSkge1xuXHRyZXR1cm4gKG9hcGkuaW5mbyAmJiBvYXBpLmluZm9bJ3gtdGItdXVpZCddKVxuXHRcdD8gb2FwaS5pbmZvWyd4LXRiLXV1aWQnXVxuXHRcdDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RW5kcG9pbnRzKG9hcGkpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG9hcGkucGF0aHMpLnJlZHVjZSgoYWNjLCBwYXRoKSA9PiB7XG5cdFx0T2JqZWN0LmtleXMob2FwaS5wYXRoc1twYXRoXSlcblx0XHRcdC5mb3JFYWNoKG9wZXJhdGlvbiA9PiB7XG5cdFx0XHRcdChvcGVyYXRpb25zLmluY2x1ZGVzKG9wZXJhdGlvbi50b0xvd2VyQ2FzZSgpKSlcblx0XHRcdFx0XHQmJiBhY2MucHVzaCh7cGF0aDogcGF0aCwgb3BlcmF0aW9uOiBvcGVyYXRpb259KTtcblx0XHRcdH0pO1xuXHRcdHJldHVybiBhY2M7XG5cdH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gZ2V0TmFtZUZyb21FbmRwb2ludChlcCkge1xuXHRjb25zdCBuYW1lID0gZXAucGF0aC5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJykucG9wKCk7XG5cdHJldHVybiAobmFtZSA9PSAnJylcblx0XHQ/IGNhcGl0YWxpemUoZXAub3BlcmF0aW9uKVxuXHRcdDogYCR7Y2FwaXRhbGl6ZShlcC5vcGVyYXRpb24pfSAke2NhcGl0YWxpemUobmFtZSl9YDtcbn1cblxuZnVuY3Rpb24gZW5kcG9pbnRzVG9Ub29sKGVuZHBvaW50LCBvcHIpIHtcblx0Y29uc3QgeyBwYXRoOiBwYXRoLCBvcGVyYXRpb246IG9wZXJhdGlvbiB9ID0gZW5kcG9pbnQ7XG5cdGNvbnN0IG5hbWUgPSBvcHJbJ3gtdGItbmFtZSddXG5cdFx0PyBvcHJbJ3gtdGItbmFtZSddXG5cdFx0OiBnZXROYW1lRnJvbUVuZHBvaW50KGVuZHBvaW50KTtcblx0Y29uc3QgaWQgPSBvcHIub3BlcmF0aW9uSWRcblx0XHQ/IG9wci5vcGVyYXRpb25JZFxuXHRcdDogZ2V0SWRGcm9tRW5kcG9pbnQoZW5kcG9pbnQpO1xuXHRjb25zdCByZXQgPSB7XG5cdFx0bmFtZVx0XHRcdDogbmFtZSxcblx0XHRpZFx0XHRcdFx0OiBpZCxcblx0XHRzcGVjX3BhdGhcdDogW3BhdGgsIG9wZXJhdGlvbl1cblx0fTtcblxuXHQvLyBwYXNzIGluIGNvbG9yIGlmIGRlZmluZWRcblx0aWYgKG9wclsneC10Yi1jb2xvciddKSB7XG5cdFx0cmV0Wydjb2xvciddID0gb3ByWyd4LXRiLWNvbG9yJ107XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cikge1xuXHRzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcblx0cmV0dXJuIGAke3N0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3N0ci5zbGljZSgxKX1gO1xufVxuIl19