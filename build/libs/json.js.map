{"version":3,"sources":["../../src/libs/json.js"],"names":["quietParse","minifyJSON","str","o","JSON","parse","e","json","tokenizer","in_string","in_multiline_comment","in_singleline_comment","tmp","tmp2","new_str","ns","from","lc","rc","lastIndex","exec","RegExp","leftContext","rightContext","substring","replace","match","length","test","join"],"mappings":";;;;;QAAgBA,U,GAAAA,U;QAWAC,U,GAAAA,U;AAXT,SAASD,UAAT,CAAoBE,GAApB,EAAyB;AAC/B,KAAIC,IAAI,IAAR;;AAEA,KAAI;AACHA,MAAIC,KAAKC,KAAL,CAAWH,GAAX,CAAJ;AACA,EAFD,CAGA,OAAMI,CAAN,EAAS,CAAG;;AAEZ,QAAOH,CAAP;AACA;;AAEM,SAASF,UAAT,CAAoBM,IAApB,EAA0B;;AAEhC,KAAIC,YAAY,+BAAhB;AAAA,KACCC,YAAY,KADb;AAAA,KAECC,uBAAuB,KAFxB;AAAA,KAGCC,wBAAwB,KAHzB;AAAA,KAICC,YAJD;AAAA,KAIMC,aAJN;AAAA,KAIYC,UAAU,EAJtB;AAAA,KAI0BC,KAAK,CAJ/B;AAAA,KAIkCC,OAAO,CAJzC;AAAA,KAI4CC,WAJ5C;AAAA,KAIgDC,WAJhD;;AAOAV,WAAUW,SAAV,GAAsB,CAAtB;;AAEA,QAAOP,MAAMJ,UAAUY,IAAV,CAAeb,IAAf,CAAb,EAAmC;AAClCU,OAAKI,OAAOC,WAAZ;AACAJ,OAAKG,OAAOE,YAAZ;AACA,MAAI,CAACb,oBAAD,IAAyB,CAACC,qBAA9B,EAAqD;AACpDE,UAAOI,GAAGO,SAAH,CAAaR,IAAb,CAAP;AACA,OAAI,CAACP,SAAL,EAAgB;AACfI,WAAOA,KAAKY,OAAL,CAAa,cAAb,EAA4B,EAA5B,CAAP;AACA;AACDX,WAAQC,IAAR,IAAgBF,IAAhB;AACA;AACDG,SAAOR,UAAUW,SAAjB;;AAEA,MAAIP,IAAI,CAAJ,KAAU,IAAV,IAAkB,CAACF,oBAAnB,IAA2C,CAACC,qBAAhD,EAAuE;AACtEE,UAAOI,GAAGS,KAAH,CAAS,QAAT,CAAP;AACA,OAAI,CAACjB,SAAD,IAAc,CAACI,IAAf,IAAwBA,KAAK,CAAL,EAAQc,MAAR,GAAiB,CAAlB,IAAwB,CAAnD,EAAsD;AAAE;AACvDlB,gBAAY,CAACA,SAAb;AACA;AACDO,UALsE,CAK9D;AACRE,QAAKX,KAAKiB,SAAL,CAAeR,IAAf,CAAL;AACA,GAPD,MAQK,IAAIJ,IAAI,CAAJ,KAAU,IAAV,IAAkB,CAACH,SAAnB,IAAgC,CAACC,oBAAjC,IAAyD,CAACC,qBAA9D,EAAqF;AACzFD,0BAAuB,IAAvB;AACA,GAFI,MAGA,IAAIE,IAAI,CAAJ,KAAU,IAAV,IAAkB,CAACH,SAAnB,IAAgCC,oBAAhC,IAAwD,CAACC,qBAA7D,EAAoF;AACxFD,0BAAuB,KAAvB;AACA,GAFI,MAGA,IAAIE,IAAI,CAAJ,KAAU,IAAV,IAAkB,CAACH,SAAnB,IAAgC,CAACC,oBAAjC,IAAyD,CAACC,qBAA9D,EAAqF;AACzFA,2BAAwB,IAAxB;AACA,GAFI,MAGA,IAAI,CAACC,IAAI,CAAJ,KAAU,IAAV,IAAkBA,IAAI,CAAJ,KAAU,IAA7B,KAAsC,CAACH,SAAvC,IAAoD,CAACC,oBAArD,IAA6EC,qBAAjF,EAAwG;AAC5GA,2BAAwB,KAAxB;AACA,GAFI,MAGA,IAAI,CAACD,oBAAD,IAAyB,CAACC,qBAA1B,IAAmD,CAAE,WAAWiB,IAAX,CAAgBhB,IAAI,CAAJ,CAAhB,CAAzD,EAAmF;AACvFE,WAAQC,IAAR,IAAgBH,IAAI,CAAJ,CAAhB;AACA;AACD;AACDE,SAAQC,IAAR,IAAgBG,EAAhB;AACA,QAAOJ,QAAQe,IAAR,CAAa,EAAb,CAAP;AACA","file":"json.js","sourcesContent":["export function quietParse(str) {\n\tlet o = null;\n\n\ttry {\n\t\to = JSON.parse(str);\n\t}\n\tcatch(e) { }\n\n\treturn o;\n}\n\nexport function minifyJSON(json) {\n\n\tlet tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r/g,\n\t\tin_string = false,\n\t\tin_multiline_comment = false,\n\t\tin_singleline_comment = false,\n\t\ttmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc\n\t;\n\n\ttokenizer.lastIndex = 0;\n\n\twhile (tmp = tokenizer.exec(json)) {\n\t\tlc = RegExp.leftContext;\n\t\trc = RegExp.rightContext;\n\t\tif (!in_multiline_comment && !in_singleline_comment) {\n\t\t\ttmp2 = lc.substring(from);\n\t\t\tif (!in_string) {\n\t\t\t\ttmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g,\"\");\n\t\t\t}\n\t\t\tnew_str[ns++] = tmp2;\n\t\t}\n\t\tfrom = tokenizer.lastIndex;\n\n\t\tif (tmp[0] == \"\\\"\" && !in_multiline_comment && !in_singleline_comment) {\n\t\t\ttmp2 = lc.match(/(\\\\)*$/);\n\t\t\tif (!in_string || !tmp2 || (tmp2[0].length % 2) == 0) {\t// start of string with \", or unescaped \" character found to end string\n\t\t\t\tin_string = !in_string;\n\t\t\t}\n\t\t\tfrom--; // include \" character in next catch\n\t\t\trc = json.substring(from);\n\t\t}\n\t\telse if (tmp[0] == \"/*\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n\t\t\tin_multiline_comment = true;\n\t\t}\n\t\telse if (tmp[0] == \"*/\" && !in_string && in_multiline_comment && !in_singleline_comment) {\n\t\t\tin_multiline_comment = false;\n\t\t}\n\t\telse if (tmp[0] == \"//\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n\t\t\tin_singleline_comment = true;\n\t\t}\n\t\telse if ((tmp[0] == \"\\n\" || tmp[0] == \"\\r\") && !in_string && !in_multiline_comment && in_singleline_comment) {\n\t\t\tin_singleline_comment = false;\n\t\t}\n\t\telse if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {\n\t\t\tnew_str[ns++] = tmp[0];\n\t\t}\n\t}\n\tnew_str[ns++] = rc;\n\treturn new_str.join(\"\");\n}\n"]}